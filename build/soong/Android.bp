// CalyxOS soong configs

bootstrap_go_package {
    name: "soong-calyx-generator",
    pkgPath: "calyx/soong/generator",
    deps: [
        "blueprint",
        "blueprint-pathtools",
        "soong",
        "soong-android",
        "soong-shared",
    ],
    srcs: [
        "generator/generator.go",
        "generator/variables.go",
    ],
    pluginFor: ["soong_build"],
}

calyx_generator {
    name: "generated_kernel_includes",

    // The headers make command
    cmd: "echo",

    // Directories that can be imported by a cc_* module generated_headers property
    export_include_dirs: [
        "usr/audio/include/uapi",
        "usr/include",
        "usr/include/audio",
        "usr/include/audio/include/uapi",
        "usr/techpack/audio/include",
    ],

    // Sources for dependency tracking
    dep_files: [
        "Makefile",
        "include/**/*",
        "techpack/audio/include/**/*",
    ],
}

cc_defaults {
    name: "generated_kernel_header_defaults",
    generated_headers: ["generated_kernel_includes"],
    export_generated_headers: ["generated_kernel_includes"],
    vendor_available: true,
    recovery_available: true,
}

cc_library_headers {
    name: "generated_kernel_headers",
    defaults: ["generated_kernel_header_defaults"],
}

cc_library_headers {
    name: "qti_kernel_headers",
    defaults: ["generated_kernel_header_defaults"],
}

// Target platform agnostic config modules
soong_config_module_type {
    name: "aapt_version_code",
    module_type: "java_defaults",
    config_namespace: "calyxGlobalVars",
    value_variables: ["aapt_version_code"],
    properties: ["aaptflags"],
}

aapt_version_code {
    name: "aapt_version_code_defaults",
    soong_config_variables: {
        aapt_version_code: {
            aaptflags: [
                "--version-code",
                "%s",
            ],
        },
    },
}

soong_config_module_type {
    name: "inline_kernel_building",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    bool_variables: ["inline_kernel_building"],
    properties: ["cppflags"],
}

inline_kernel_building {
    name: "inline_kernel_building_defaults",
    soong_config_variables: {
        inline_kernel_building: {
            cppflags: ["-DINLINE_KERNEL_BUILD"],
        },
    },
}

soong_config_module_type {
    name: "gralloc_10_usage_bits",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    value_variables: ["additional_gralloc_10_usage_bits"],
    properties: ["cppflags"],
}

gralloc_10_usage_bits {
    name: "gralloc_10_usage_bits_defaults",
    soong_config_variables: {
        additional_gralloc_10_usage_bits: {
            cppflags: ["-DADDNL_GRALLOC_10_USAGE_BITS=%s"],
        },
    },
}

soong_config_module_type {
    name: "gralloc_handle_custom_content_md_reserved_size",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    bool_variables: ["gralloc_handle_has_custom_content_md_reserved_size"],
    properties: ["export_cflags"],
}

gralloc_handle_custom_content_md_reserved_size {
    name: "gralloc_handle_has_custom_content_md_reserved_size_defaults",
    soong_config_variables: {
        gralloc_handle_has_custom_content_md_reserved_size: {
            export_cflags: ["-DGRALLOC_HANDLE_HAS_CUSTOM_CONTENT_MD_RESERVED_SIZE"],
        },
    },
}

soong_config_module_type {
    name: "gralloc_handle_reserved_size",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    bool_variables: ["gralloc_handle_has_reserved_size"],
    properties: ["export_cflags"],
}

gralloc_handle_reserved_size {
    name: "gralloc_handle_has_reserved_size_defaults",
    soong_config_variables: {
        gralloc_handle_has_reserved_size: {
            export_cflags: ["-DGRALLOC_HANDLE_HAS_RESERVED_SIZE"],
        },
    },
}

soong_config_module_type {
    name: "vendor_init",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    value_variables: ["target_init_vendor_lib"],
    properties: ["whole_static_libs"],
}

vendor_init {
    name: "vendor_init_defaults",
    soong_config_variables: {
        target_init_vendor_lib: {
            whole_static_libs: ["%s"],
        },
    },
}

soong_config_module_type {
    name: "surfaceflinger_udfps_lib",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    value_variables: ["target_surfaceflinger_udfps_lib"],
    properties: [
        "cppflags",
        "whole_static_libs",
    ],
}

surfaceflinger_udfps_lib {
    name: "surfaceflinger_udfps_lib_defaults",
    soong_config_variables: {
        target_surfaceflinger_udfps_lib: {
            cppflags: ["-DTARGET_PROVIDES_UDFPS_LIB"],
            whole_static_libs: ["%s"],
        },
    },
}

soong_config_module_type {
    name: "trust_usb_control",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    value_variables: [
        "target_trust_usb_control_path",
        "target_trust_usb_control_enable",
        "target_trust_usb_control_disable",
    ],
    properties: ["cppflags"],
}

trust_usb_control {
    name: "trust_usb_control_defaults",
    soong_config_variables: {
        target_trust_usb_control_path: {
            cppflags: ["-DUSB_CONTROL_PATH=\"%s\""],
        },
        target_trust_usb_control_enable: {
            cppflags: ["-DUSB_CONTROL_ENABLE=\"%s\""],
        },
        target_trust_usb_control_disable: {
            cppflags: ["-DUSB_CONTROL_DISABLE=\"%s\""],
        },
    },
}

soong_config_module_type {
    name: "health_charging_control",
    module_type: "cc_defaults",
    config_namespace: "calyxGlobalVars",
    bool_variables: [
        "target_health_charging_control_supports_toggle",
        "target_health_charging_control_supports_bypass",
        "target_health_charging_control_supports_deadline",
    ],
    value_variables: [
        "target_health_charging_control_charging_path",
        "target_health_charging_control_charging_enabled",
        "target_health_charging_control_charging_disabled",
        "target_health_charging_control_deadline_path",
    ],
    properties: ["cppflags"],
}

health_charging_control {
    name: "health_charging_control_defaults",
    soong_config_variables: {
        target_health_charging_control_supports_toggle: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_SUPPORTS_TOGGLE"],
        },
        target_health_charging_control_supports_bypass: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_SUPPORTS_BYPASS"],
        },
        target_health_charging_control_supports_deadline: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_SUPPORTS_DEADLINE"],
        },
        target_health_charging_control_charging_path: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_CHARGING_PATH=\"%s\""],
        },
        target_health_charging_control_charging_enabled: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_CHARGING_ENABLED=\"%s\""],
        },
        target_health_charging_control_charging_disabled: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_CHARGING_DISABLED=\"%s\""],
        },
        target_health_charging_control_deadline_path: {
            cppflags: ["-DHEALTH_CHARGING_CONTROL_DEADLINE_PATH=\"%s\""],
        },
    },
}

// QCOM specific config modules
soong_config_module_type {
    name: "librmnetctl_pre_uplink",
    module_type: "cc_defaults",
    config_namespace: "calyxQcomVars",
    bool_variables: ["uses_pre_uplink_features_netmgrd"],
    properties: ["cflags"],
}

librmnetctl_pre_uplink {
    name: "librmnetctl_pre_uplink_defaults",
    soong_config_variables: {
        uses_pre_uplink_features_netmgrd: {
            cflags: ["-DNO_UPLINK_FEATURES"],
        },
    },
}

soong_config_module_type {
    name: "extended_compress_format",
    module_type: "cc_defaults",
    config_namespace: "calyxQcomVars",
    bool_variables: ["supports_extended_compress_format"],
    properties: ["cflags"],
}

extended_compress_format {
    name: "extended_compress_format_defaults",
    soong_config_variables: {
        supports_extended_compress_format: {
            cflags: ["-DENABLE_EXTENDED_COMPRESS_FORMAT"],
        },
    },
}

soong_config_module_type {
    name: "surfaceflinger_qcom_extensions",
    module_type: "cc_defaults",
    config_namespace: "calyxQcomVars",
    value_variables: ["qcom_display_headers_namespace"],
    properties: [
        "cppflags",
        "header_libs",
    ],
}

surfaceflinger_qcom_extensions {
    name: "surfaceflinger_qcom_ext_defaults",
    soong_config_variables: {
        qcom_display_headers_namespace: {
            cppflags: ["-DQCOM_UM_FAMILY"],
            header_libs: ["//%s:display_intf_headers"],
        },
    },
}
