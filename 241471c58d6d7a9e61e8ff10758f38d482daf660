{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "036d541f_cef51ccd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2023-09-25T23:34:13Z",
      "side": 1,
      "message": "Fairly sloppy proof-of-concept. Still verifying if it works.",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f72e56de_4237a73d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-26T07:55:11Z",
      "side": 1,
      "message": "Compare the two things noted below between \n1. prod builds, outdated AOSP apex built inline, i.e. 4.13.0\n2. your apex changes, updated apex prebuilts\n\nand it should likely be all we need to know about signing. hopefully.",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f85b80f7_f7cb2636",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-26T07:55:11Z",
      "side": 1,
      "message": "`EXTRA_RELEASETOOLS_ARGS\u003d\"-p $RELEASETOOLS_PATH -v\"` will help when debugging.",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85100afa_ee34b6b7",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2023-09-26T16:59:34Z",
      "side": 1,
      "message": "I looked at output lines filtered by `grep -i apex` and did a comparison. I *think* everything looks normal...\n\n- `Signing apk file` shows e.g. `HalfSheetUX@331910040` instead of `HalfSheetUX@TQ3A.230901.001`, as expected.\n- `signing:` lines for apex files often show `_compressed.apex` instead of `.apex`, as expected, with the rest of the line identical. `com.android.os.statsd` is similar in that it shows `com.android.os.statsd.prebuilt` instead.\n- There are now dozens of `WARNING : Failed to find com.android.something.apex in target_files; Ignored`-type lines because of the brute-force approach this change takes.\n- Some lines have different values for `--salt` which sounds normal for a salt.",
      "parentUuid": "f85b80f7_f7cb2636",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e652f8fb_9236d5f0",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-26T07:55:11Z",
      "side": 1,
      "message": "Also, once this is done, look for `META/apexkeys.txt` and `META/apkkeys.txt` in the signed target-files zip.",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d27c0790_d8a85019",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2023-09-26T16:59:34Z",
      "side": 1,
      "message": "Despite the releasetools output looking normal to me so far and appearing to be signing the APEXes regardless of PRESIGNED state, `META/apexkeys.txt` is showing PRESIGNED in the signed target files for the prebuilts build, e.g.\n`name\u003d\"com.android.wifi_compressed.apex\" public_key\u003d\"PRESIGNED\" private_key\u003d\"PRESIGNED\" container_certificate\u003d\"PRESIGNED\" container_private_key\u003d\"PRESIGNED\" partition\u003d\"system\"`",
      "parentUuid": "e652f8fb_9236d5f0",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f76f6b4e_e5cbb1c4",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2023-09-26T18:10:59Z",
      "side": 1,
      "message": "apksigner has the same results for source-built and prebuilt apex target files, so I think at minimum the apex containers are being signed.\n\n(This creates a certs.txt with verbose output and cert info for every apex and then compares between target files, and comes up with an empty diff.)\n\n```\nsigndir\u003d\"$(pwd)\"\nunzip archive/release-bramble-23413040/bramble-target_files-23413040.zip META/\\* SYSTEM/apex/\\* -d source_signed\n\nunzip archive/release-bramble-23413040.03/bramble-target_files-23413040.03.zip META/\\* SYSTEM/apex/\\* -d prebuilts_signed\n\nfor d in source_signed prebuilts_signed; do\n  pushd \"$d\"\n  for a in SYSTEM/apex/*apex; do\n    name\u003d\"$(basename -s .apex \"${a/.capex/_compressed.apex}\")\"\n    name\u003d\"${name/.prebuilt/}\"\n    echo \"${name/_compressed/}\"\n    \"$signdir/bin/apksigner\" verify --print-certs --verbose \"$a\"\n  done | tee certs.txt\n  popd\ndone\n\necho Differences:\ndiff -Nau {source_signed,prebuilts_signed}/certs.txt\n```",
      "parentUuid": "d27c0790_d8a85019",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d45d732_8843f9a9",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2023-09-26T18:31:14Z",
      "side": 1,
      "message": "Missing lines from apexkeys.txt vs source-built:\n```\nname\u003d\"com.android.art.apex\" public_key\u003d\"art/build/apex/com.android.art.avbpubkey\" private_key\u003d\"art/build/apex/com.android.art.pem\" container_certificate\u003d\"art/build/apex/com.android.art.x509.pem\" container_private_key\u003d\"art/build/apex/com.android.art.pk8\" partition\u003d\"system_ext\"\n\nname\u003d\"com.android.art.debug.apex\" public_key\u003d\"art/build/apex/com.android.art.avbpubkey\" private_key\u003d\"art/build/apex/com.android.art.pem\" container_certificate\u003d\"art/build/apex/com.android.art.x509.pem\" container_private_key\u003d\"art/build/apex/com.android.art.pk8\" partition\u003d\"system_ext\"\n\nname\u003d\"com.android.art.host.apex\" public_key\u003d\"art/build/apex/com.android.art.avbpubkey\" private_key\u003d\"art/build/apex/com.android.art.pem\" container_certificate\u003d\"build/make/target/product/security/testkey.x509.pem\" container_private_key\u003d\"build/make/target/product/security/testkey.pk8\" partition\u003d\"system\"\n\nname\u003d\"com.android.art.testing.apex\" public_key\u003d\"art/build/apex/com.android.art.avbpubkey\" private_key\u003d\"art/build/apex/com.android.art.pem\" container_certificate\u003d\"art/build/apex/com.android.art.x509.pem\" container_private_key\u003d\"art/build/apex/com.android.art.pk8\" partition\u003d\"system_ext\"\n```\n\nEverything else is the additions of the entries for _compressed.apex and .prebuilt.apex, all of which are marked as PRESIGNED here.\n\n---\n\nMissing lines from apkcerts.txt vs source-built:\n```\nname\u003d\"odsign_e2e_test_app.apk\" certificate\u003d\"build/make/target/product/security/testkey.x509.pem\" private_key\u003d\"build/make/target/product/security/testkey.pk8\" partition\u003d\"data\"\n```\n\nThe others are NetworkStack.prebuilt and CaptivePortalLogin.prebuilt, which are not currently even included (turned off via flags), but show up here anyway.\n\nOn-device, this all appears to be working. I flashed a signed build and even upgraded from a non-prebuilts build and it worked. (Won\u0027t boot with NetworkStack included yet due to permissions, so it\u0027s not included right now, but should be an easy fix.)",
      "parentUuid": "f76f6b4e_e5cbb1c4",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4822f82b_38898983",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-26T19:17:50Z",
      "side": 1,
      "message": "\u003e I flashed a signed build and even upgraded from a non-prebuilts build and it worked.\n\nAs far as signing is concerned, that\u0027s irrelevant because in theory keys can be changed on upgrade.\n\nHowever,\n1. Install non-prebuilts build\n2. Sign a prebuilts build, but don\u0027t install it\n3. Extract prebuilts build, adb install each apex\n\nMight be another way to check.\n\nHowever, the rest of the checks look ok.",
      "parentUuid": "6d45d732_8843f9a9",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "070e0b0f_f3a99870",
        "filename": "scripts/release.sh",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2023-09-26T20:11:46Z",
      "side": 1,
      "message": "Ahh that\u0027s a perfect idea. And it worked fine, so the signing must be okay, I think.\n\nCaveats:\n* Connectivity didn\u0027t work, because my non-prebuilts build accidentally didn\u0027t have topic:mainline-connectivity, so that led to crashing at boot trying to call the missing setUidsAllowedTransports; this interestingly resolved itself after a reboot or two (rolled back on its own apparently, using APEX rollback I guess?).\n* `adb install` does not support compressed APEX files, showing `Error [-22] [apexd verification failed : Cannot verify ApexVerity of compressed APEX]`. The code itself confirms it\u0027s not a verification error, just an actual lack of support for compressed APEX. You need to unzip the compressed APEX, rename original_apex to original.apex, and then install that, which works fine.",
      "parentUuid": "4822f82b_38898983",
      "revId": "241471c58d6d7a9e61e8ff10758f38d482daf660",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    }
  ]
}